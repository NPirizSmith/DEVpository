datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING") 
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Post {
  id            String      @default(cuid()) @id
  title         String
  description   String?
  url           String
  author        User?       @relation(fields: [authorId], references: [id])
  authorId      String?
  logo          String?
  userFavorites User[]      @relation("UserFavoritePosts")
  preview       String?
  tags  Tag[] @relation("PostTags")
  generalRating Int?
  published   Boolean   @default(true) 
}

model User {
  id            String       @default(cuid()) @id
  name          String?      
  email         String          @unique
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @updatedAt @map(name: "updated_at")
  favoritePosts Post[]       @relation("UserFavoritePosts")
  posts         Post[]     
 preferences     String[]   @default([])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
 

model Tag {
  id     String      @default(cuid()) @id
  name   String      @unique
  category String
  color String
  posts  Post[]      @relation("PostTags")
}




model Rating {
  id      String  @default(cuid()) @id
  value   Int     
  userId  String  
  postId  String  
}